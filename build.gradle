buildscript {
    ext {
        // ソースと実行ファイルのJavaバージョン
        jdkVersion = jdkVersion
        defaultEncoding = defaultEncoding

        // SpringBoot
        springBootVersion = springbootVersion

        // SpringBootAdmin
        springbootAdminVersion = springbootAdminVersion

        // SpringFox
        springfoxVersion = springfoxVersion

        // ModelMapper
        modelmapperVersion = modelmapperVersion

        // jUnit5
        jupiterVersion = jupiterVersion
        platformVersion = platformVersion

    }

    repositories {
        jcenter()
    }

}

plugins {
    id "com.github.ben-manes.versions" version "0.20.0"
    id 'com.github.hierynomus.license' version '0.14.0'
    id "com.github.spotbugs" version "1.6.2"
    id "org.springframework.boot" version "2.0.3.RELEASE"
    id "org.sonarqube" version "2.6.2"
}

apply from: "$rootDir/gradle/code-quality.gradle"
apply from: "$rootDir/gradle/ide.gradle"

sonarqube {
    properties {
        property "sonar.github.repository", "mabubu0203/ItemControl"
        property "sonar.host.url", "http://localhost:9000/sonar"
        property "sonar.jacoco.reportPaths", { "${project.buildDir}/jacoco/test.exec" }
        property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
        property "sonar.jdbc.password", "sonar"
        property "sonar.jdbc.url", "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8"
        property "sonar.jdbc.username", "sonar"
        property "sonar.junit.reportsPaths", { "${project.buildDir}/test-results" }
        property "sonar.language", "java"
        property "sonar.links.issue", "https://github.com/mabubu0203/ItemControl/issues"
        property "sonar.links.scm", "https://github.com/mabubu0203/ItemControl"
        property "sonar.scm.provider", "git"
    }
}

allprojects {

    apply plugin: 'checkstyle'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'
    apply plugin: 'java'

    repositories {
        jcenter()
    }

    checkstyle {
        toolVersion = '8.11'
        configFile = rootProject.file('config/checkstyle/google_checks.xml')
        showViolations = true
    }

    license {
        include "**/*.java"
        header = rootProject.file("config/license/license.template")
        strictCheck = true
        skipExistingHeaders = true
        ext {
            copyright_range = Calendar.getInstance().get(Calendar.YEAR)
            name = "urata"
        }
        mapping {
            java = "DOUBLESLASH_STYLE"
        }
        licenseMain.enabled = false
        licenseTest.enabled = false
    }

    jacoco {
        toolVersion = "0.8.1"
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    javadoc {
        options {
            addStringOption("-add-modules", "java.xml.bind,java.xml.ws.annotation")
            author = true
            charSet = defaultEncoding
            docEncoding = defaultEncoding
            encoding = defaultEncoding
            links(
                    "https://docs.oracle.com/javase/9/docs/api/",
                    "https://docs.spring.io/spring-boot/docs/current/api/"
            )
            linkSource = true
            noHelp = true
            setMemberLevel(JavadocMemberLevel.PUBLIC)
            setNoQualifiers(["all"])
        }
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled = false
            html.enabled = true
            html.stylesheet = resources.text.fromFile(rootProject.file("config/checkstyle/checkstyle-custom.xsl"))
        }
    }

    tasks.withType(JavaCompile) {
        doFirst {
            options.encoding = defaultEncoding
            sourceCompatibility = jdkVersion
            targetCompatibility = jdkVersion
            options.compilerArgs = [
                    '-Xlint:unchecked', '-Xlint:deprecation',
                    '--add-modules', 'java.xml.bind',
                    '--add-modules', 'java.xml.ws.annotation',
                    '--add-exports', 'java.xml.bind/com.sun.istack.internal=ALL-UNNAMED'
            ]
        }
    }

}

subprojects {

    apply plugin: 'application'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'war'

    repositories {
        jcenter()
    }

    spotbugs {
        toolVersion = '3.1.5'
    }

    task('default') {
        dependsOn 'clean', 'check'
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

}

project(':micro-admin') {
    ext.moduleName = 'jp.co.valtech.items.admin'
}

project(':micro-api') {
    ext.moduleName = 'jp.co.valtech.items.api'
    dependencies {
        compile project(':micro-common'), project(':micro-interfaces'), project(':micro-rdb'), project(':micro-validator')
        testCompile project(':micro-test')
    }
}

project(':micro-common') {
    ext.moduleName = 'jp.co.valtech.items.common'
}

project(':micro-interfaces') {
    ext.moduleName = 'jp.co.valtech.items.interfaces'
    dependencies {
        compile project(':micro-validator')
        testCompile project(':micro-test')
    }
}

project(':micro-rdb') {
    ext.moduleName = 'jp.co.valtech.items.rdb'
    dependencies {
        compile project(':micro-common'), project(':micro-validator')
        testCompile project(':micro-test')
    }
}

project(':micro-test') {
    ext.moduleName = 'jp.co.valtech.items.test'
}

project(':micro-validator') {
    ext.moduleName = 'jp.co.valtech.items.validator'
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleVersion
}