buildscript {
    ext {
        // ソースと実行ファイルのJava バージョン
        jdkVersion = jdkVersion
        defaultEncoding = defaultEncoding

        // SpringBoot
        springBootVersion = springbootVersion

        // springfox
        springfoxVersion = springfoxVersion

        // Others
        modelmapperVersion = modelmapperVersion

    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://repo.spring.io/snapshot"
        }
        maven {
            url "https://repo.spring.io/milestone"
        }
        maven {
            url "http://repo.spring.io/release"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1")
    }

}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"
    id "org.sonarqube" version "2.6.2"
    id "com.github.spotbugs" version "1.6.0"
}

allprojects {

    apply plugin: 'application'
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.ben-manes.versions'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'com.github.spotbugs'
    apply plugin: 'idea'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'pmd'
    apply plugin: 'war'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://repo.spring.io/snapshot"
        }
        maven {
            url "https://repo.spring.io/milestone"
        }
        maven {
            url "http://repo.spring.io/release"
        }
    }

    checkstyle {
        toolVersion = '8.8'
        configFile file('downloaded_google_checks.xml')
        showViolations = true
    }

    dependencies {

        // modelmapper
        compile("org.modelmapper.extensions:modelmapper-spring:${modelmapperVersion}")
        // lombok
        compile("org.projectlombok:lombok")

        // SpringBoot projects
        compile("org.springframework.boot:spring-boot-starter")
        compile('org.springframework.boot:spring-boot-starter-data-rest') {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter'
        }
        compile("org.springframework.boot:spring-boot-starter-validation") {
            exclude group: 'org.springframework.boot', module: 'spring-boot-starter'
            exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-el'
        }

        // SpringFox
        compile("io.springfox:springfox-bean-validators:$springfoxVersion")
        compile("io.springfox:springfox-data-rest:$springfoxVersion")
        compile("io.springfox:springfox-swagger2:$springfoxVersion")
    }

    jacoco {
        toolVersion = "0.8.0"
        reportsDir = file("$buildDir/customJacocoReportDir")
    }

    pmd {
        toolVersion = "6.1.0"
        ignoreFailures = true
        consoleOutput = true
        ruleSetFiles = rootProject.files("/config/pmd/pmd-project-rulesets.xml")
        ruleSets = [
                'java-braces',
                'java-codesize',
        ]
    }

    sonarqube {
        properties {
            property "sonar.host.url", "http://localhost:9000/"
            property "sonar.jdbc.driverClassName", "com.mysql.jdbc.Driver"
            property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        }
    }

    spotbugs {
        toolVersion = '3.1.2'
    }

    task('default') {
        dependsOn 'clean', 'check'
    }

    tasks.withType(Checkstyle) {
        reports {
            xml.enabled false
            html.enabled true
            html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
        }
    }

    tasks.withType(JavaCompile) {
        doFirst {
            options.encoding = defaultEncoding
            sourceCompatibility = jdkVersion
            targetCompatibility = jdkVersion
            options.compilerArgs = [
                    '-Xlint:unchecked', '-Xlint:deprecation',
                    '--add-modules', 'java.xml.bind',
                    '--add-modules', 'java.xml.ws.annotation',
                    '--add-exports', 'java.xml.bind/com.sun.istack.internal=ALL-UNNAMED'
            ]
        }
    }

    tasks.withType(Javadoc) {
        doFirst {
            options.addStringOption('-add-modules', 'java.xml.bind,java.xml.ws.annotation')
            options.encoding = defaultEncoding
        }
    }

    tasks.withType(com.github.spotbugs.SpotBugsTask) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

}

project(':micro-api') {
    ext.moduleName = 'jp.co.valtech.items.api'
    dependencies {
        compile project(':micro-common'), project(':micro-interfaces'), project(':micro-rdb')
    }
}

project(':micro-common') {
    ext.moduleName = 'jp.co.valtech.items.common'
}

project(':micro-interfaces') {
    ext.moduleName = 'jp.co.valtech.items.interfaces'
}

project(':micro-rdb') {
    ext.moduleName = 'jp.co.valtech.items.rdb'
    dependencies {
        compile project(':micro-common'), project(':micro-interfaces')
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleVersion
}